// Generated by CoffeeScript 1.6.3
(function() {
  var PEERPORT, PORT, PeerServer, app, express, getRoomCount, getRoomCounts, http, io, peerServer, server, socketio;

  PeerServer = require('peer').PeerServer;

  express = require('express');

  http = require('http');

  socketio = require('socket.io');

  PORT = 8000;

  PEERPORT = 9000;

  app = express();

  server = http.createServer(app);

  io = socketio.listen(server, {
    log: false
  });

  server.listen(PORT);

  peerServer = new PeerServer({
    port: PEERPORT
  });

  console.log("Express server listening on port " + PORT);

  console.log("Peer server listening on port " + PEERPORT);

  app.use(express["static"]("" + __dirname + "/../"));

  getRoomCounts = function(io, socket) {
    var counts;
    counts = {};
    return setImmediate((function() {
      var k, rooms, v, _ref;
      rooms = io.sockets.manager.roomClients[socket.id];
      _ref = io.sockets.manager.rooms;
      for (k in _ref) {
        v = _ref[k];
        counts[k] = v.length;
      }
      return io.sockets.emit('set-room-count', {
        roomCounts: counts
      });
    }));
  };

  getRoomCount = function(io, socket, room) {
    return setImmediate((function() {
      var attendees;
      attendees = io.sockets.clients(room);
      attendees = attendees.map(function(attendee) {
        return attendee.id;
      });
      console.log("ATTENDEES", attendees);
      return io.sockets.emit("set-room-attendence", attendees);
    }));
  };

  io.sockets.on('connection', function(socket) {
    socket.on('disconnect', function() {
      var room, rooms, state, _results;
      getRoomCounts(io, socket);
      rooms = io.sockets.manager.roomClients[socket.id];
      _results = [];
      for (room in rooms) {
        state = rooms[room];
        room = room.slice(1);
        _results.push(getRoomCount(io, socket, room));
      }
      return _results;
    });
    socket.on('create-room', function(name) {
      socket.join(name);
      return getRoomCounts(io, socket);
    });
    socket.on('get-room-attendence', function(room) {
      return setImmediate((function() {
        var attendees;
        attendees = io.sockets.clients(room);
        attendees = attendees.map(function(attendee) {
          return attendee.id;
        });
        return io.sockets.emit("set-room-attendence", attendees);
      }));
    });
    socket.on('join-room', function(room) {
      socket.join(room);
      getRoomCounts(io, socket);
      return socket.emit('joined-room', room);
    });
    socket.emit("status", socket.id);
    return getRoomCounts(io, socket);
  });

}).call(this);
