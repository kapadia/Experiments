// Generated by CoffeeScript 1.6.3
(function() {
  var DOMReady, connectToPeer, createPeerConnection, createRoom, createRoomEl, createSocketConnection, createSocketConnectionOld, peer, peerId, promptEl, promptInputEl, promptSubmitEl, requestPeerId, roomTableEl, setSocketCallbacks, stateCreateView, stateElems, stateInitialEl, statusEl;

  connectToPeer = function(peerId) {
    var c, remotePeer;
    console.log('connectToPeer', peerId);
    remotePeer = new Peer({
      host: 'localhost',
      port: 9000
    });
    c = remotePeer.connect(peerId, {
      reliable: true
    });
    return new astro.FITS('lib/m101.fits', function(fits) {
      var dataunit;
      dataunit = fits.getDataUnit();
      return dataunit.getFrame(0, function(arr) {
        var compressed, gzip, uint8;
        uint8 = new Uint8Array(arr.buffer);
        gzip = new Zlib.Gzip(uint8);
        compressed = gzip.compress();
        return c.send(compressed);
      });
    });
  };

  peerId = null;

  createSocketConnectionOld = function() {
    var socket;
    socket = io.connect();
    return socket.on('status', function(e) {
      if (e.status === true) {
        alert('hey hey hey');
        socket.on('requestPeerId', function(sessionId) {
          console.log('requestPeerId');
          if (socket.socket.sessionid !== sessionId) {
            return socket.emit('sendPeerId', socket.socket.sessionid, peer.id);
          }
        });
        return socket.on('sendPeerId', function(data) {
          if (socket.socket.sessionid !== data.sessionId) {
            if (peerId == null) {
              peerId = data.peerId;
              return connectToPeer(peerId);
            }
          }
        });
      } else {
        return alert('Socket connection fails.');
      }
    });
  };

  peer = null;

  createPeerConnection = function() {
    peer = new Peer({
      host: 'localhost',
      port: 9000,
      debug: false
    });
    peer.on('open', function(id) {
      return console.log('peer open', id);
    });
    return peer.on('connection', function(c) {
      console.log('connection');
      return c.on('data', function(buffer) {
        var arr, compressed, gunzip, uint8;
        compressed = new Uint8Array(buffer);
        gunzip = new Zlib.Gunzip(compressed);
        uint8 = gunzip.decompress();
        arr = new Uint16Array(uint8.buffer);
        return console.log(arr);
      });
    });
  };

  requestPeerId = function(e) {
    var button;
    button = $(e.target);
    button.attr('disabled', 'disabled');
    return socket.emit('requestPeerId', socket.socket.sessionid);
  };

  createRoom = function(e) {
    var socket;
    console.log('createRoom');
    socket = e.data.socket;
    promptEl.addClass('active');
    return promptSubmitEl.on('click', function(e) {
      var name;
      name = promptInputEl.val();
      if (name === '') {
        return;
      }
      promptInputEl.val('');
      promptEl.removeClass('active');
      return socket.emit('create-room', name);
    });
  };

  setSocketCallbacks = function(socket) {
    socket.on('set-room-count', function(e) {
      var count, name, room, template, _ref;
      console.log("e.rooms", e.rooms);
      template = "";
      _ref = e.roomCounts;
      for (room in _ref) {
        count = _ref[room];
        name = room === '' ? 'Default' : room;
        template += "<div class='row'>\n  <span class='key'>" + name + "</span>\n  <span class='value'>" + count + "</span>";
        if (e.rooms[room] == null) {
          template += "<button class='join' data-room='" + name + "'>Join</button>";
        }
        template += "</div>";
      }
      return roomTableEl.html(template);
    });
    return createRoomEl.on('click', {
      socket: socket
    }, createRoom);
  };

  createSocketConnection = function() {
    var socket;
    socket = io.connect('http://localhost');
    return socket.on('status', function(e) {
      if (e.status === true) {
        setSocketCallbacks(socket);
        statusEl.text("Socket Connected");
        stateElems.removeClass('active');
        return stateCreateView.addClass('active');
      }
    });
  };

  createRoomEl = null;

  statusEl = null;

  stateElems = null;

  stateInitialEl = null;

  stateCreateView = null;

  roomTableEl = null;

  promptEl = null;

  promptInputEl = null;

  promptSubmitEl = null;

  DOMReady = function() {
    stateElems = $("article");
    stateInitialEl = $("article[data-state='initial']");
    stateCreateView = $("article[data-state='create-view']");
    createRoomEl = $("button[name='create-room']");
    statusEl = $("p.status");
    roomTableEl = stateCreateView.find("div.table");
    promptEl = $("div.prompt");
    promptInputEl = $("input[name='create-room']");
    promptSubmitEl = $("input[name='create-room-submit']");
    return createSocketConnection();
  };

  window.addEventListener('DOMContentLoaded', DOMReady, false);

}).call(this);
