// Generated by CoffeeScript 1.6.3
(function() {
  var DOMReady, connectToPeer, createPeerConnection, createSocketConnection, peer, peerId, requestPeerId, socket;

  connectToPeer = function(peerId) {
    var c, remotePeer;
    console.log('connectToPeer', peerId);
    remotePeer = new Peer({
      host: 'localhost',
      port: 9000
    });
    c = remotePeer.connect(peerId, {
      reliable: true
    });
    return new astro.FITS('lib/m101.fits', function(fits) {
      var dataunit;
      dataunit = fits.getDataUnit();
      return dataunit.getFrame(0, function(arr) {
        var compressed, gzip, uint8;
        uint8 = new Uint8Array(arr.buffer);
        gzip = new Zlib.Gzip(uint8);
        compressed = gzip.compress();
        return c.send(compressed);
      });
    });
  };

  socket = null;

  peerId = null;

  createSocketConnection = function() {
    socket = io.connect('0.0.0.0', {
      port: 5000
    });
    console.log(socket);
    return socket.on('status', function(e) {
      if (e.status === true) {
        socket.on('requestPeerId', function(sessionId) {
          console.log('requestPeerId');
          if (socket.socket.sessionid !== sessionId) {
            return socket.emit('sendPeerId', socket.socket.sessionid, peer.id);
          }
        });
        return socket.on('sendPeerId', function(data) {
          if (socket.socket.sessionid !== data.sessionId) {
            if (peerId == null) {
              peerId = data.peerId;
              return connectToPeer(peerId);
            }
          }
        });
      } else {
        return alert('Socket connection fails.');
      }
    });
  };

  peer = null;

  createPeerConnection = function() {
    peer = new Peer({
      host: 'localhost',
      port: 9000,
      debug: false
    });
    peer.on('open', function(id) {
      return console.log('peer open', id);
    });
    return peer.on('connection', function(c) {
      console.log('connection');
      return c.on('data', function(buffer) {
        var arr, compressed, gunzip, uint8;
        compressed = new Uint8Array(buffer);
        gunzip = new Zlib.Gunzip(compressed);
        uint8 = gunzip.decompress();
        arr = new Uint16Array(uint8.buffer);
        return console.log(arr);
      });
    });
  };

  requestPeerId = function(e) {
    var button;
    button = $(e.target);
    button.attr('disabled', 'disabled');
    return socket.emit('requestPeerId', socket.socket.sessionid);
  };

  DOMReady = function() {
    var button;
    console.log('DOMContentLoaded');
    createSocketConnection();
    createPeerConnection();
    button = document.querySelector("button[name='connect-to-peer']");
    return button.onclick = requestPeerId;
  };

  window.addEventListener('DOMContentLoaded', DOMReady, false);

}).call(this);
